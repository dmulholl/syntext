
# Block Syntax

Syntex supports two kinds of block-level markup: custom syntax for common elements and generic syntax for generating arbitrary HTML.



## Common Elements


### Paragraphs

A paragraph is a group of adjacent lines separated by one or more blank lines:

    This is a paragraph. Note that it includes
    all adjacent lines of text.

    This is a second paragraph.



### Headings

H1 headings can be enclosed in equals signs `=`:

    ==========
    H1 Heading
    ==========

H2 headings can be enclosed in dashes `-`:

    ----------
    H2 Heading
    ----------

In each case the top line of symbols is optional. Headings can also be indicated by prefacing their text with an appropriate number of hashes `#`:

    ### H3 Heading ###

The trailing symbols in the example above are optional and can be omitted.



### Compact Lists

A *compact list* is a list containing no blank lines. List items will not be wrapped in paragraph tags in the HTML output.

An unordered list can use either an asterisk `*`, dash `-`, plus symbol `+`, or unicode bullet symbol `\u2022` as its list-item marker:

    * foo           - foo           + foo           • foo
    * bar           - bar           + bar           • bar
    * baz           - baz           + baz           • baz

An ordered list uses either integer-period `<int>.` or hash-period `#.` as its list-item marker:

    1. foo         #. foo
    2. bar         #. bar
    3. baz         #. baz

Ordered lists are numbered according to their opening integer:

    5. This list starts
    6. With list item 5

List-item markers can be indented by up to three spaces. A list-item consists of its opening line plus all subsequent indented lines:

    * This list item is split
      over two lines.

List items can contain nested compact lists:

    * foo
      1. bar
      2. baz
    * bam

Note that switching to a different list-item marker will begin a new list, i.e. the following markup will create two separate lists each containing a single item:

    - foo
    + bar



### Block Lists

A *block list* is a list containing one or more blank lines. Each list-item is parsed as a new block-level context and can contain any number of block-level elements, including paragraphs, headings, and nested lists.

    * This list item contains a paragraph and a compact list.

      1. foo
      2. bar

    * This list item contains two paragraphs. This is the first.

      And this is the second.

List-item markers can be indented by up to three spaces. A list-item consists of its opening line plus all subsequent blank or indented lines.



### Definition Lists

Syntex supports definition lists in the following format:

    ~ Term 1

        This is the definition of the first term.

    ~ Term 2

        This is the definition of the second term.

A *term* is indicated by an opening tilde `~`, which may be indented by up to three spaces. The term's *definition* consists of all subsequent blank or indented lines and can contain any number of block-level elements.



### Code Blocks

A block of text indented by one tab or four spaces is treated as a code block and wrapped in `<pre>` tags in the HTML output. The code block can contain blank lines and is ended by the first non-indented line.

    This is a paragraph followed by a code block.

        <p>Hello world!</p>

HTML in code blocks is automatically escaped.



### Horizontal Rules

A line containing three or more `*` or `-` characters (optionally separated by spaces) will produce a horizontal rule:

    * * *
    -----



### Raw HTML

Syntex can recognise and ignore block-level HTML in its input so you can freely mix and match Syntex markup and raw HTML.

Syntex uses a simple rule for identifying block-level HTML: an opening tag followed *vertically below* by its corresponding closing tag, e.g.

    This is a paragraph.

    <div>
        <p>This is raw HTML and will be left untouched.</p>
    </div>

    This is another paragraph.

The opening and closing tags should not be indented *relative to their context* but can be freely mixed with other block-level Syntex elements, e.g.

    :div .outer
        This is a paragraph.

        <div class="inner">
            <p>This is raw HTML.</p>
        </div>

        This is another paragraph.

Note that Syntex formatting will not be processed inside block-level HTML.



## Generic Blocks

Syntex supports an alternative, indentation-based syntax for generating arbitrary block-level elements:

    :tag [keyword] [.class1 .class2] [#id] [attr1=foo attr2="bar" attr3='baz']
        block content
        block content
        ...

A generic block opens with a header line containing a colon, a tag and, optionally, a set of attributes. The block's content then consists of all subsequent blank or indented lines following the header.

The block's content can be indented by any number of spaces; the common indent is stripped and the first non-indented line ends the block. Leading and trailing blank lines are also stripped from the content.

To take a simple example, the markup below:

    :div
        This is a paragraph.

generates the following HTML:

    <div>
        <p>This is a paragraph.</p>
    </div>

A block header can contain a single ID, any number of classes, and any number of named attributes. Block syntax also allows for one or more keyword arguments to be supplied (whether these are used depends on the specific tag). So the markup below:

    :div #mydiv .someclass
        This is a paragraph.

generates the following HTML:

    <div id="mydiv" class="someclass">
        <p>This is a paragraph.</p>
    </div>

A block's tag indicates its type and determines how its content is processed. In the general case blocks can be nested to any depth and can contain any block-level content, i.e. the markup below:

    :div .outer
        :div .inner
            This is a paragraph.

will generate the following HTML:

    <div class="outer">
        <div class="inner">
            <p>This is a paragraph.</p>
        </div>
    </div>

By default, all unrecognised tags are rendered like the `:div` tag above. Syntex recognises that a certain subset of tags require special processing, e.g. that paragraph and heading tags cannot contain nested block content. All such tags are listed below.

Syntex also supports a set of custom tags with no HTML equivalents, e.g. the `:alert` tag for creating alert boxes. All custom tags are listed below.

Note that a tag can have one or more aliases which are treated identically, e.g. the tag `:blockquote` and the sigil `:>>` both create a `<blockquote>` element in the HTML output. Tags with registered aliases are listed below.



### Tag Reference

#### `:alert`

    :alert [ info | warning | error ]
    :!! [ info | warning | error ]

Creates an alert box - a `<div>` element with the class `stx-alert` which can be styled appropriately using CSS. Keywords are added as classes in the form `stx-<keyword>`. Supports nested block-level content.


#### `:blockquote`

    :blockquote
    :>>

Creates a `<blockquote>` element. Supports nested block-level content.


#### `:comment`

    :comment
    :##

Creates a HTML comment. Content is not processed but is included in the output in its raw state.


#### `:esc`

    :esc
    :\\\\

Indicates that the block contains content which should not be processed but should be included in the output in its raw state.


#### `:h1 ... :h6`

    :h1
    :h2
    :h3
    :h4
    :h5
    :h6

Creates a heading element of the specified level. Heading elements do not support nested block-level content.


#### `:ignore`

    :ignore
    ://

Instructs Syntex to ignore the block's content. Can be used to add comments to a document that will not appear in the rendered output.


#### `:image`

    :image <src>

Block-level alternative to the inline image tag. The block's content is used as the image's `alt` text. This tag does not support nested block-level content.


#### `:nl2br`

    :nl2br
    :||

Turns on newline-to-linebreak mode. All nested content will have newlines converted to `<br>` tags.


#### `:null`

    :null
    :<<

A `:null` block has no HTML representation of its own; instead it passes its attributes on to its immediate children. This tag can be used to apply attributes to paragraphs, lists, etc. Supports nested block-level content.


#### `:p`

    :p

Creates a `<p>` element. Does not support nested block-level content.


#### `:pre`

    :pre <language>
    ::: <language>

Creates a `<pre>` element. Accepts an optional keyword argument specifying the language of the code.

If a language is specified then a `lang-<language>` class and a `data-lang="<language>"` attribute are added to the `<pre>` element.

If a language is specified and the [Pygments](http://pygments.org) package is installed then syntax highlighting can be applied to the code sample. This feature is turned off by default but can be enabled via the library's `pygmentize` flag.

::: python

    >>> import syntex
    >>> syntex.pygmentize = True


#### `:script`

    :script

Creates a `<script>` element. Content is not processed but is included in the output in its raw state.


#### `:style`

    :style

Creates a `<style>` element. Content is not processed but is included in the output in its raw state.


#### `:++`

    :++

This tag indicates that the block contains a simple table in the following format:

    default | left | center | right
    ------- | :--- | :----: | ----:
     aaaaa  |  bb  |  cccc  |  ddd
     eeeee  |  ff  |  gggg  |  hhh

The colons specify the alignment of their columns; cells in the left column receive the class `stx-left`, cells in the center column receive the class `stx-center`, and cells in the right column receive the class `stx-right`.

If you don't need to specify column alignment, you can use the simpler format below:

    foo | bar | baz
    ---------------
    aaa | bbb | ccc
    ddd | eee | fff
