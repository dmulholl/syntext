
# Miscellanea



### Escapes

The following characters can be escaped by a preceding backslash:

    ! " # $ % & \ ' ( ) * + , - . / : ; < = > ? @ [ ] ^ _ ` { | } ~ â€¢

Escaped characters lose any special significance they might otherwise have.



### Tables of Contents

Syntex can automatically generate a table of contents for a document. This table can be inserted using the `insert` tag:

    :insert toc

The default listing skips H1 headings to avoid including the document title itself. A full listing of all the document's headings can be inserted using the `fulltoc` keyword:

    :insert fulltoc

The table of contents is generated as an unordered list of links.



### Footnotes

Syntex includes built-in support for footnotes:

    This sentence ends with a footnote reference.[^1]

Footnote references can omit their index to take advantage of automatic numbering:

    This sentence ends with an automatically-numbered reference.[^]

Footnotes themselves can be specified anywhere in the document using the `footnote` tag:

    :footnote 1
        This is a footnote. It can contain any number of block-level elements.

Footnotes can also omit their index to take advantage of automatic numbering:

    :footnote
        This is an automatically-numbered footnote.

Note that footnote indices do not have to be numeric. Any character or sequence of characters can be used.

You can specify the insertion point for your footnotes using the `:insert` tag:

    :insert footnotes

Footnotes are inserted as a definition list with indices as definition terms.



### Extensions

Syntex can easily be extended to support custom tags.

To create a new custom tag, register its handler function using the `@tags.register()` decorator:

::: python

    import syntex

    @syntex.tags.register('tag')
    def handler(tag, pargs, kwargs, content, meta):
        ...
        return node

See the `tags.py` file for numerous examples to follow.

Custom tag names should be prefixed with a colon, i.e. the custom tag `foo` should be registered as `":foo"`. The tag can then be used with a double colon:

    ::foo
        Block content.

This convention makes custom tags easy to identify and prevents potential name clashes as new builtin tags are added over time.
